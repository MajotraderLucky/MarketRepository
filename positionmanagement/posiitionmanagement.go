package positionmanagement

import (
	"log"
	"strconv"

	"github.com/MajotraderLucky/MarketRepository/klinesdata"
	"github.com/MajotraderLucky/MarketRepository/positionlog"
)

func Hello() {
	log.Println("Hello positionmanagement!")
}

func GetPositionData() (positionAmt string, entryPrice string, err error) {
	autoGeneratedPos := positionlog.GetAutoGeneratedPos()
	positionAmt, entryPrice, err = positionlog.GetPositionData(autoGeneratedPos)
	if err != nil {
		log.Fatalf("Error getting position data: %v", err)
	}
	log.Println("Position Amt: ", positionAmt)
	log.Println("Entry Price: ", entryPrice)

	return positionAmt, entryPrice, nil
}

func ConvertPositionDataToFloat64(positionAmt string, entryPrice string) (float64, float64, error) {
	positionAmtFloat64, err := strconv.ParseFloat(positionAmt, 64)
	if err != nil {
		log.Fatalf("Error converting position amount to float: %v", err)
	}

	entryPriceFloat64, err := strconv.ParseFloat(entryPrice, 64)
	if err != nil {
		log.Fatalf("Error converting entry price to float: %v", err)
	}

	log.Println("Position Amt float64: ", positionAmtFloat64)
	log.Println("Entry Price float64: ", entryPriceFloat64)

	return positionAmtFloat64, entryPriceFloat64, nil
}

func GetFiboLevelStringNow() (string, error) {
	levelStringNow, _ := klinesdata.IsAskPriceHigherThanLongFibRetLog()
	log.Println("Fibo level string now: ", levelStringNow)

	return levelStringNow, nil
}

func GetFiboLevelFloat64Now() (float64, error) {
	levelStringNow, _ := klinesdata.IsAskPriceHigherThanLongFibRetLog()
	longFiboLevelsFloat64, err := klinesdata.GetFibonacciLevelsReturns()
	if err != nil {
		log.Fatalf("Error getting Fibonacci level: %v", err)
	}

	if levelStringNow == "LongFib236" {
		return longFiboLevelsFloat64[0], nil
	}

	if levelStringNow == "LongFib382" {
		return longFiboLevelsFloat64[1], nil
	}

	if levelStringNow == "LongFib500" {
		return longFiboLevelsFloat64[2], nil
	}

	if levelStringNow == "LongFib618" {
		return longFiboLevelsFloat64[3], nil
	}

	if levelStringNow == "LongFib786" {
		return longFiboLevelsFloat64[4], nil
	}

	log.Println("Price is not higher than any Fibonacci level")
	return 0, nil
}
