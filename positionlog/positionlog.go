package positionlog

import (
	"context"
	"encoding/json"
	"log"
	"os"
	"strconv"

	"github.com/MajotraderLucky/MarketRepository/initlog"
)

type AutoGeneratedPos struct {
	Assets []struct {
		Asset                  string `json:"asset"`
		InitialMargin          string `json:"initialMargin"`
		MaintMargin            string `json:"maintMargin"`
		MarginBalance          string `json:"marginBalance"`
		MaxWithdrawAmount      string `json:"maxWithdrawAmount"`
		OpenOrderInitialMargin string `json:"openOrderInitialMargin"`
		PositionInitialMargin  string `json:"positionInitialMargin"`
		UnrealizedProfit       string `json:"unrealizedProfit"`
		WalletBalance          string `json:"walletBalance"`
	} `json:"assets"`
	FeeTier                     int    `json:"feeTier"`
	CanTrade                    bool   `json:"canTrade"`
	CanDeposit                  bool   `json:"canDeposit"`
	CanWithdraw                 bool   `json:"canWithdraw"`
	UpdateTime                  int    `json:"updateTime"`
	TotalInitialMargin          string `json:"totalInitialMargin"`
	TotalMaintMargin            string `json:"totalMaintMargin"`
	TotalWalletBalance          string `json:"totalWalletBalance"`
	TotalUnrealizedProfit       string `json:"totalUnrealizedProfit"`
	TotalMarginBalance          string `json:"totalMarginBalance"`
	TotalPositionInitialMargin  string `json:"totalPositionInitialMargin"`
	TotalOpenOrderInitialMargin string `json:"totalOpenOrderInitialMargin"`
	TotalCrossWalletBalance     string `json:"totalCrossWalletBalance"`
	TotalCrossUnPnl             string `json:"totalCrossUnPnl"`
	AvailableBalance            string `json:"availableBalance"`
	MaxWithdrawAmount           string `json:"maxWithdrawAmount"`
	Positions                   []struct {
		Isolated               bool   `json:"isolated"`
		Leverage               string `json:"leverage"`
		InitialMargin          string `json:"initialMargin"`
		MaintMargin            string `json:"maintMargin"`
		OpenOrderInitialMargin string `json:"openOrderInitialMargin"`
		PositionInitialMargin  string `json:"positionInitialMargin"`
		Symbol                 string `json:"symbol"`
		UnrealizedProfit       string `json:"unrealizedProfit"`
		EntryPrice             string `json:"entryPrice"`
		MaxNotional            string `json:"maxNotional"`
		PositionSide           string `json:"positionSide"`
		PositionAmt            string `json:"positionAmt"`
		Notional               string `json:"notional"`
		IsolatedWallet         string `json:"isolatedWallet"`
		UpdateTime             int64  `json:"updateTime"`
	} `json:"positions"`
}

func Hello() {
	log.Println("Hello positionlog!")
}

// The function returns the volume of an open position.
func GetOpenPositionVolume(pos AutoGeneratedPos) {
	futuresClient := initlog.NewFuturesClient()
	accServ, err := futuresClient.NewGetAccountService().Do(context.Background())
	if err != nil {
		log.Println(err)
		return
	}
	accServVar, _ := json.Marshal(accServ)
	fileJson, err := json.Marshal(accServ)
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("fileJson.json", fileJson, 0644)
	if err != nil {
		panic(err)
	}
	var autoGeneratedPos AutoGeneratedPos
	json.Unmarshal(accServVar, &autoGeneratedPos)

	var positionBTCindex int

	for k := 0; k < len(autoGeneratedPos.Positions); k++ {
		if autoGeneratedPos.Positions[k].Symbol == "BTCUSDT" {
			positionBTCindex = k
		}
	}
	log.Println("Item positions total:", autoGeneratedPos.Positions[positionBTCindex].PositionAmt)
}

// A function that returns the var autoGeneratedPos.
func GetAutoGeneratedPos() AutoGeneratedPos {
	futuresClient := initlog.NewFuturesClient()
	accServ, err := futuresClient.NewGetAccountService().Do(context.Background())
	if err != nil {
		log.Println(err)
		return AutoGeneratedPos{}
	}
	accServVar, _ := json.Marshal(accServ)
	var autoGeneratedPos AutoGeneratedPos
	json.Unmarshal(accServVar, &autoGeneratedPos)
	return autoGeneratedPos
}

// A function return true if there is an open position.
func IsOpenPositions(pos AutoGeneratedPos) bool {
	futuresClient := initlog.NewFuturesClient()
	accServ, err := futuresClient.NewGetAccountService().Do(context.Background())
	if err != nil {
		log.Println(err)
		return false
	}
	accServVar, _ := json.Marshal(accServ)
	fileJson, err := json.Marshal(accServ)
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("fileJson.json", fileJson, 0644)
	if err != nil {
		panic(err)
	}
	var autoGeneratedPos AutoGeneratedPos
	json.Unmarshal(accServVar, &autoGeneratedPos)

	var positionBTCindex int

	for k := 0; k < len(autoGeneratedPos.Positions); k++ {
		if autoGeneratedPos.Positions[k].Symbol == "BTCUSDT" {
			positionBTCindex = k
		}
	}
	positionAmtFloat, err := strconv.ParseFloat(autoGeneratedPos.Positions[positionBTCindex].PositionAmt, 64)
	if err != nil {
		log.Println(err)
		return false
	}
	return positionAmtFloat != 0
}

// The function writes data about all positions to a file.
func WritePositionsToFile(autoGeneratedPos AutoGeneratedPos, positionBTCindex int) error {
	filePath := "logs/positions.json"

	file, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	position := autoGeneratedPos.Positions[positionBTCindex]

	// Create a struct for writing the position in the file.
	data := struct {
		Symbol      string `json:"symbol"`
		PositionAmt string `json:"positionAmt"`
	}{
		Symbol:      position.Symbol,
		PositionAmt: position.PositionAmt,
	}

	// Encoding the data in JSON format.
	jsonData, err := json.Marshal(data)
	if err != nil {
		return err
	}

	// Writing the data in the file.
	_, err = file.Write(jsonData)
	if err != nil {
		return err
	}
	log.Printf("Wrote position %s to %s\n", position.Symbol, filePath)
	return nil
}
