package account

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"strconv"

	"github.com/adshao/go-binance/v2"
)

func Account() {
	tickerName := "BTCUSDT"
	fmt.Println("----------------------")
	fmt.Println("     ", tickerName, "- bot")

	fmt.Println("----------------------")
	apiKey, exists := os.LookupEnv("BINANCE_API_KEY")
	if exists {
		fmt.Println("apiKey exist")
	}

	secretKey, exexists := os.LookupEnv("BINANCE_SECRET_KEY")
	if exexists {
		fmt.Println("secretKey exist")
		fmt.Println("----------------------")
	}

	futuresClient := binance.NewFuturesClient(apiKey, secretKey)

	resAcc, err := futuresClient.NewGetAccountService().Do(context.Background())
	if err != nil {
		fmt.Println(err)
		return
	}
	// fmt.Println(resAcc)

	accVar, _ := json.Marshal(resAcc)
	// fmt.Println(accVar)

	type Account struct {
		FeeTier                     int    `json:"feeTier"`
		CanTrade                    bool   `json:"canTrade"`
		CanDeposit                  bool   `json:"canDeposit"`
		CanWithdraw                 bool   `json:"canWithdraw"`
		UpdateTime                  int64  `json:"updateTime"`
		TotalInitialMargin          string `json:"totalInitialMargin"`
		TotalMaintMargin            string `json:"totalMaintMargin"`
		TotalWalletBalance          string `json:"totalWalletBalance"`
		TotalUnrealizedProfit       string `json:"totalUnrealizedProfit"`
		TotalMarginBalance          string `json:"totalMarginBalance"`
		TotalPositionInitialMargin  string `json:"totalPositionInitialMargin"`
		TotalOpenOrderInitialMargin string `json:"totalOpenOrderInitialMargin"`
		TotalCrossWalletBalance     string `json:"totalCrossWalletBalance"`
		TotalCrossUnPnl             string `json:"totalCrossUnPnl"`
		AvailableBalance            string `json:"availableBalance"`
		MaxWithdrawAmount           string `json:"maxWithdrawAmount"`
	}

	var account Account
	json.Unmarshal(accVar, &account)
	fmt.Println("----------------------")

	accountStart := 18.149229049682617 + 7.53667852 + 11.86 + 11.97
	accountNowString := account.AvailableBalance
	if accountNowFloat, err := strconv.ParseFloat(accountNowString, 32); err == nil {
		fmt.Println(accountStart, "- start")
		fmt.Println(accountNowFloat, "- now")
		fmt.Print("proffit($) = ", accountNowFloat-accountStart, "$", "\n")
		if accountNowFloat < accountStart {
			fmt.Print("proffit(%) = -", (accountNowFloat/accountStart)*100, "%")
		} else {
			fmt.Print("proffit(%) = ", (accountNowFloat/accountStart)*100, "%")
		}
	}
	fmt.Println()
	fmt.Println("----------------------")

	accServ, err := futuresClient.NewGetAccountService().Do(context.Background())
	if err != nil {
		fmt.Println(err)
		return
	}
	accServVar, _ := json.Marshal(accServ)
	// fmt.Println(accServVar, reflect.TypeOf(accServVar))

	fileJson, err := json.Marshal(accServ)
	if err != nil {
		panic(err)
	}
	err = ioutil.WriteFile("fileJson.json", fileJson, 0644)
	if err != nil {
		panic(err)
	}

	type AutoGeneratedPos struct {
		Assets []struct {
			Asset                  string `json:"asset"`
			InitialMargin          string `json:"initialMargin"`
			MaintMargin            string `json:"maintMargin"`
			MarginBalance          string `json:"marginBalance"`
			MaxWithdrawAmount      string `json:"maxWithdrawAmount"`
			OpenOrderInitialMargin string `json:"openOrderInitialMargin"`
			PositionInitialMargin  string `json:"positionInitialMargin"`
			UnrealizedProfit       string `json:"unrealizedProfit"`
			WalletBalance          string `json:"walletBalance"`
		} `json:"assets"`
		FeeTier                     int    `json:"feeTier"`
		CanTrade                    bool   `json:"canTrade"`
		CanDeposit                  bool   `json:"canDeposit"`
		CanWithdraw                 bool   `json:"canWithdraw"`
		UpdateTime                  int    `json:"updateTime"`
		TotalInitialMargin          string `json:"totalInitialMargin"`
		TotalMaintMargin            string `json:"totalMaintMargin"`
		TotalWalletBalance          string `json:"totalWalletBalance"`
		TotalUnrealizedProfit       string `json:"totalUnrealizedProfit"`
		TotalMarginBalance          string `json:"totalMarginBalance"`
		TotalPositionInitialMargin  string `json:"totalPositionInitialMargin"`
		TotalOpenOrderInitialMargin string `json:"totalOpenOrderInitialMargin"`
		TotalCrossWalletBalance     string `json:"totalCrossWalletBalance"`
		TotalCrossUnPnl             string `json:"totalCrossUnPnl"`
		AvailableBalance            string `json:"availableBalance"`
		MaxWithdrawAmount           string `json:"maxWithdrawAmount"`
		Positions                   []struct {
			Isolated               bool   `json:"isolated"`
			Leverage               string `json:"leverage"`
			InitialMargin          string `json:"initialMargin"`
			MaintMargin            string `json:"maintMargin"`
			OpenOrderInitialMargin string `json:"openOrderInitialMargin"`
			PositionInitialMargin  string `json:"positionInitialMargin"`
			Symbol                 string `json:"symbol"`
			UnrealizedProfit       string `json:"unrealizedProfit"`
			EntryPrice             string `json:"entryPrice"`
			MaxNotional            string `json:"maxNotional"`
			PositionSide           string `json:"positionSide"`
			PositionAmt            string `json:"positionAmt"`
			Notional               string `json:"notional"`
			IsolatedWallet         string `json:"isolatedWallet"`
			UpdateTime             int64  `json:"updateTime"`
		} `json:"positions"`
	}

	var autoGeneratedpos AutoGeneratedPos
	json.Unmarshal(accServVar, &autoGeneratedpos)

	var positionBTCindex int

	for k := 0; k < len(autoGeneratedpos.Positions); k++ {
		if autoGeneratedpos.Positions[k].Symbol == "BTCUSDT" {
			positionBTCindex = k
		}
	}
	fmt.Println("index position BTC -", positionBTCindex)
	fmt.Println("Unrealized profit =", autoGeneratedpos.TotalUnrealizedProfit)
	fmt.Println("The entry price position -", autoGeneratedpos.Positions[positionBTCindex].EntryPrice)
	fmt.Println("Position size", autoGeneratedpos.Positions[positionBTCindex].PositionAmt)
	fmt.Println("Item positions total -", len(autoGeneratedpos.Positions))
	fmt.Println("----------------------")
}
